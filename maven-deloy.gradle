apply plugin: 'com.novoda.bintray-release' // must be applied after your artifact generating plugin (eg. java / com.android.library)

def configFile = rootProject.file("maven-deloy-config.properties")
// Initialize a new Properties() object called keystorePro perties.
def configProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
if (configFile.exists()) {
    configProperties.load(new FileInputStream(configFile))
} else {
    configProperties.load(new FileInputStream(rootProject.file("maven-deloy-config-placeholder.properties")))
}

publish {
    userOrg = USER_ORG
    groupId = GROUP_ID
    artifactId = ARTIFACT_ID
    publishVersion = DELOY_VERSION
    website = GITHUB_URL
    desc = DESC
    repoName = REPO_NAME
    bintrayUser = configProperties['bintray.user']
    bintrayKey = configProperties['bintray.key']
}

apply plugin: 'maven'
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri(project.rootDir.getAbsolutePath() + '/repo'))
            pom.groupId = GROUP_ID
            pom.artifactId = ARTIFACT_ID
            pom.version = DELOY_VERSION
            pom.packaging = PACKAGING

            pom.withXml {
                def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')
                dependenciesNode.children().clear()

                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.version == "unspecified" || dep.name == null || dep.name == "unspecified")
                        return // ignore invalid dependencies

                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)

                    if (!dep.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }

                // List all "compile" dependencies (for old Gradle)
                configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
                // List all "api" dependencies (for new Gradle) as "compile" dependencies
                try {//workaround for plugin
                    configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                } catch (Exception ignore) {
                }
                // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }

            }
        }
    }
}